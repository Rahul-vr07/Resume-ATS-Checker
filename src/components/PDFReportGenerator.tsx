import React from 'react';
import jsPDF from 'jspdf';
import { ResumeAnalysis } from '../types';
import { Download } from 'lucide-react';

interface PDFReportGeneratorProps {
  analysis: ResumeAnalysis;
  fileName: string;
}

export const PDFReportGenerator: React.FC<PDFReportGeneratorProps> = ({ analysis, fileName }) => {
  const generatePDF = () => {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.width;
    let yPos = 20;

    // Title
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Resume ATS Analysis Report', pageWidth / 2, yPos, { align: 'center' });
    yPos += 20;

    // Overall Score
    pdf.setFontSize(16);
    pdf.setFont('helvetica', 'bold');
    pdf.text(`Overall ATS Score: ${analysis.score}%`, 20, yPos);
    yPos += 15;

    // Section Scores
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Section Breakdown:', 20, yPos);
    yPos += 10;

    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Keywords: ${analysis.sectionScores.keywords}%`, 30, yPos);
    yPos += 7;
    pdf.text(`Formatting: ${analysis.sectionScores.formatting}%`, 30, yPos);
    yPos += 7;
    pdf.text(`Skills: ${analysis.sectionScores.skills}%`, 30, yPos);
    yPos += 7;
    pdf.text(`Experience: ${analysis.sectionScores.experience}%`, 30, yPos);
    yPos += 15;

    // Strengths
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Strengths:', 20, yPos);
    yPos += 10;

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');
    analysis.strengths.forEach((strength, index) => {
      const lines = pdf.splitTextToSize(`â€¢ ${strength}`, pageWidth - 40);
      pdf.text(lines, 30, yPos);
      yPos += lines.length * 5 + 2;
    });
    yPos += 10;

    // Suggestions
    if (yPos > 250) {
      pdf.addPage();
      yPos = 20;
    }

    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('Improvement Suggestions:', 20, yPos);
    yPos += 10;

    pdf.setFontSize(11);
    pdf.setFont('helvetica', 'normal');
    analysis.suggestions.forEach((suggestion, index) => {
      const lines = pdf.splitTextToSize(`${index + 1}. ${suggestion}`, pageWidth - 40);
      pdf.text(lines, 30, yPos);
      yPos += lines.length * 5 + 2;
      
      if (yPos > 270 && index < analysis.suggestions.length - 1) {
        pdf.addPage();
        yPos = 20;
      }
    });

    // Missing Keywords
    if (analysis.missingKeywords.length > 0) {
      if (yPos > 200) {
        pdf.addPage();
        yPos = 20;
      }

      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Missing Keywords to Consider:', 20, yPos);
      yPos += 10;

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      const keywordText = analysis.missingKeywords.slice(0, 30).join(', ');
      const lines = pdf.splitTextToSize(keywordText, pageWidth - 40);
      pdf.text(lines, 20, yPos);
    }

    // Footer
    const pageCount = pdf.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setFont('helvetica', 'normal');
      pdf.text(
        'Generated by Resume Auditor + ATS Checker',
        pageWidth / 2,
        pdf.internal.pageSize.height - 10,
        { align: 'center' }
      );
    }

    // Save the PDF
    const reportFileName = `ats-report-${fileName.split('.')[0]}.pdf`;
    pdf.save(reportFileName);
  };

  return (
    <button
      onClick={generatePDF}
      className="flex items-center px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
    >
      <Download className="mr-2 h-4 w-4" />
      Download PDF Report
    </button>
  );
};